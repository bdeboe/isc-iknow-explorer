<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="Explorer.js" application="/csp/explorer/" default="1"><![CDATA[

var ikApp = angular.module('ikApp', ['ngSanitize']);

// global params
var debug = true;
var pageSize = 50;

ikApp.controller('iKnowController', ['$scope', '$filter', '$compile', '$sce', function($scope, $filter, $compile, $sce) {
	
	this.domain = $.urlParam("domain");
    this.namespace = $.urlParam("namespace");
	this.mode = 'entities';
	this.currentEntity = '';
	this.filter = {};
    
    
    $scope.mainEntities = [];
    this.getEntities = function(str, forceApply=true) {
        if ((str == null) || (str == '')) {
            this.post("/domain/"+this.domain+"/entities", {}, function(data, ctrl) { 
                $scope.mainEntities = data.entities;
                if (forceApply) $scope.$apply();
            });
        } else {
            this.post("/domain/"+this.domain+"/entities/similar", { string: str }, function(data) { 
                $scope.mainEntities = data.entities;
                if (forceApply) $scope.$apply();
            });
        }
    };
    
    $scope.relEntities = [];
    this.getRelatedEntities = function(ent, forceApply=true) {
        if ((ent==null) || (ent=='')) {
            $scope.relEntities=[];
            return;
        }
        this.post("/domain/"+this.domain+"/entities/related", { entity: ent }, function(data) {
            $scope.relEntities = data.entities;
            if (forceApply) $scope.$apply();
        });
    };
    
    this.explore = function(ent, forceApply=true) {
        this.exploreEntity(ent, forceApply);
        this.getSources(forceApply);
        this.getTopicScores(forceApply);
    }
    this.exploreEntity = function(ent, forceApply=true) {
        this.currentEntity = ent;
        this.getEntities(ent, forceApply);
        this.getRelatedEntities(ent, forceApply);
    }
    
    
	this.typeEntity = function(event) {
		if (event && ((event.keyCode==13) || (event.which==13))) {
			this.exploreEntity(this.currentEntity);
		}
	}
    
    
    $scope.pathEnts = [];
    $scope.paths = [];
    this.getPaths = function(otherEnt) {
        $scope.pathEnts = [this.currentEntity, otherEnt ];
        this.post("/domain/"+this.domain+"/paths/by/entity", { 
            entity: $scope.pathEnts,
            setOperation: 'intersect'
        }, function(data) {
            $scope.paths = [];
            for (var i in data.paths) {
                var p = data.paths[i]; 
                var str = '';
                for (var j in p.entities) {
                    var e = p.entities[j];
                    str += "<button type='button' class='btn btn-sm ";
                    if ($scope.pathEnts.indexOf(e.entity)>=0) {
                        str += "btn-success";
                    } else if (e.role == 'concept') {
                        str += "btn-primary";
                    } else if (e.role == 'relation') {
                        str += "btn-default";
                    } else if (e.role == 'pathRelevant') {
                        str += "btn-info";
                    }
                    str += "' style='margin-right: 10px; padding: 1px 5px;"
                    str += "'>"+ e.entity + "</button>";
                }
                var obj = { sourceId: p.sourceId, str: $sce.trustAsHtml(str) };
                $scope.paths.push(obj);
            }
            $scope.$apply();
            $('#modal-paths').modal('show');
        });
    };
    
    $scope.sources = [];
    $scope.filteredSourceCount = "";
    this.getSources = function(forceApply=false) {
        this.getSourceCount();
        var request = { 
            highlight: this.getHighlights(),
            includeMetadata: false,
            includeSnippets: 1
        };
        this.post("/domain/"+this.domain+"/sources", request, function(data) {
            $scope.sources = data.sources;
            $scope.$apply();
            $scope.applyHighlighting();
        });
    };
    this.showSource = function(srcId) {
        this.selectedSourceSummarize = 0;
        this.selectedSourceId = srcId;
        $scope.selectedSource = {};
        this.drawSource();
        $("#modal-source").modal();
    }
    this.drawSource = function() {
        this.post("/domain/"+this.domain+"/sources/"+this.selectedSourceId+"/details",  { 
            summarize: this.selectedSourceSummarize, 
            highlight: this.getHighlights() 
        }, function(data) {
            $scope.selectedSource.metadata = data.metadata;
            $scope.selectedSource.text = data.text;
            $scope.$apply();
            $scope.applyHighlighting();
            $('#modal-source-link').click(function(event) {
               window.open(data.metadata.Link, '_blank'); 
            });
        });
        
        this.post("/domain/"+this.domain+"/entities", {
            filter: { ids: [this.selectedSourceId]},
            sortBy: 'dominance'
        }, function(data) {
            $scope.selectedSource.entities = data.entities;
            $scope.$apply();
        });
        this.post("/domain/"+this.domain+"/matching/matches/by/source/"+this.selectedSourceId, { 
            matchFirst: false, 
            includeSnippets: 0, 
            includeDictionaryDetails: true,
            page: 0, pageSize: 0
        }, function(data) {
            var c = $('#chart-src-topics').highcharts();
            if (c) c.destroy();
            
            var metric = 'score';
            var map = { d:{}, i:{} };
            for (var i in data.matches) {
                var m = data.matches[i];
                var dict = m.term.item.dictionary;
                var color = $scope.getTopicSettings(dict.id, dict.name).color;
                if (!map.d[dict.id]) { 
                    map.d[dict.id] = {
                        y: m[metric],
                        name: dict.name,
                        drilldown: 'd'+dict.id,
                        color: color
                    };
                    map.i[dict.id] = {};
                    map.i[dict.id][m.term.item.id] = {
                        name: m.term.item.name,
                        value: m[metric]
                    };
                } else {
                    map.d[dict.id].y += m[metric];
                    if (!map.i[dict.id][m.term.item.id]) {
                        map.i[dict.id][m.term.item.id] = {
                            name: m.term.item.name,
                            value: m[metric]
                        };
                    } else {
                        map.i[dict.id][m.term.item.id].value += m[metric];
                    }
                }
            }
            var seriesData = [];
            var drilldownSeries = [];
            for (var i in map.d) {
                seriesData.push(map.d[i]);
                var dd = {
                    name: map.d[i].name,
                    id: map.d[i].drilldown,
                    data: []
                };
                for (var j in map.i[i]) {
                    dd.data.push([map.i[i][j].name, map.i[i][j].value]);
                }
                drilldownSeries.push(dd);
            }
            console.log(drilldownSeries);
            
            $('#chart-src-topics').highcharts({
                chart: {
                    type: 'bar'
                },
                title: '',
                legend: {
                    enabled: true
                },
                xAxis: {
                    type: 'category'
                },
                yAxis: {
                    title: {
                        enabled: false
                    }
                },
                series: [{
                    name: "matches",
                    data: seriesData
                }],
                drilldown: { series: drilldownSeries }
            });
        });
    };
    this.getSourceCount = function(forceApply=false) {
        this.post("/domain/"+this.domain+"/sources/count", {}, function(data) {
            $scope.filteredSourceCount = data.count;
            if (forceApply) $scope.$apply();
        }, true);
    };
    
    $scope.topicLevel = "dictionary";
    $scope.topicFilter = {};
    $scope.totalMatchCount = "";
    $scope.topicChartType = 'line';
    this.getTopicScores = function() {
        
        // first reset time chart
        var c = $('#chart-topics-line-small').highcharts();
        if (c && c.series) {
            for (var i=0; i<c.series.length;i++) {
                c.series[0].remove();
            }
        }
        
        this.post("/domain/"+this.domain+"/matching/aggregate/"+$scope.topicLevel, 
                  { topicFilter: $scope.topicFilter }, 
                  function(data) {
            var agg = []; var total = 0; 
            for (var i = 0; i < data.scores.length; i++) {
                var ts = $scope.getTopicSettings(data.scores[i].id, data.scores[i].name);
                if (!ts.chart) continue;
                agg.push({
                    id: data.scores[i].id,
                    name: data.scores[i].name,
                    value: data.scores[i].totalScore,
                    colorValue: data.scores[i].avgScore,
                    matchCount: data.scores[i].matchCount,
                    color: ts.color,
                    events: { 
                        click: function(event) {
                            $scope.topicLevel = 'item';
                            $scope.topicFilter.dictionaries = [ this.id ];
                            $("#chart-topics-tree-small-refresh").click();
                        }
                    }
                });
                total += data.scores[i].matchCount;
                
                // and for the time graph
                var timeSeriesData = [];
                for (var j = 0; j < data.scores[i].detail.length; j++) {
                    var d = data.scores[i].detail[j].pubDate.split(':');
                    timeSeriesData.push([Date.UTC(d[0],d[1]-1,d[2]-1,d[3]), data.scores[i].detail[j].matchCount]);
                }
                $('#chart-topics-line-small').highcharts().addSeries({ 
                    name: data.scores[i].name, 
                    data: timeSeriesData, 
                    color: ts.color
                });
            }
            $scope.totalMatchCount = total;
            
            $('#chart-topics-tree').highcharts().series[0].setData(agg);
            $('#chart-topics-tree-small').highcharts().series[0].setData(agg);
        }, true);
    };
    
    this.filterDateField = 'PublicationDate'; // TODO: parameterize
    this.saveFilterForm = function() {
        // time
        var fromDate = $.horolog($('#input-filter-date-from').data('datetimepicker').getDate());
        var toDate = $.horolog($('#input-filter-date-to').data('datetimepicker').getDate());
        if (fromDate != null) {
            if (toDate != null) {
                this.filter.dateFilter = { field: this.filterDateField, operator: 'BETWEEN', value:fromDate+';'+toDate };
            } else {
                this.filter.dateFilter = { field: this.filterDateField, operator: '>=', value:fromDate };
            }
        } else {
            if (toDate != null) {
                this.filter.dateFilter = { field: this.filterDateField, operator: '<=', value:toDate };
            } else {
                this.filter.dateFilter = null;
            }
        }
        this.explore(null, true);
        $('#modal-filters').modal('hide');
        this.updateFilterBar();
    }
    
    this.updateFilterBar = function() {
        $('#filter-bar').empty();
        if (!this.filter) return;
        
        // time range
        if (this.filter.dateFilter) {
            var df = $('#input-filter-date-from').data('datetimepicker').getDate();
            var dt = $('#input-filter-date-to').data('datetimepicker').getDate();
            if (df && dt) {
                var lbl = df.toLocaleDateString()+' > '+dt.toLocaleDateString();
            } else if (df) {
                var lbl = 'since '+df.toLocaleDateString();
            } else if (dt) {
                var lbl = 'until '+dt.getLocaleDateString();
            }
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-success").text(lbl);
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","ik.removeFilter('date');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
        
        // entity
        if (this.filter.entities) {
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-primary").text("Contains: "+this.filter.entities.join(','));
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","console.log('ok'); ik.removeFilter('entity');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
        
        // topic
        if (this.filter.topic) {
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-danger").text("Topic: "+this.filter.topic);
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","console.log('ok'); ik.removeFilter('topic');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
    };
    this.removeFilter = function(name) {
        if (name == 'date') {
            delete this.filter.dateFilter;
        } else if (name == 'entity') {
            delete this.filter.entities;
        } else if (name == 'topic') {
            delete this.filter.topic;
        }
        this.explore(null, true);
        this.updateFilterBar();
    };
    this.filterEntity = function(ent) {
        if (this.filter.entities && (this.filter.entities.length>0)) {
            this.filter.entities.push(ent);
        } else {
            this.filter.entities = [ ent ];
        }
        this.updateFilterBar();
        this.explore('');
    };
    
    $scope.topicSettings = { topics: {}, hlMax: 0 };
	/*this.initTopicSettings() = function() {
        this.post("/domain/"+this.domain+"/matching/dictionaries", { includeItems: false }, function(data) {
            for (var i = 0; i < data.dictionaries.length; i++) {
                var d = data.dictionaries[i];
                if (!$scope.topicSettings.highlight[d.id])
                    $scope.topicSettings.highlight[d.id] = this.getNewColor();
            }
            if (forceApply) $scope.$apply();
        }, true);
    };*/
    $scope.getTopicSettings = function(tid, tname) {
        var ts = $scope.topicSettings.topics[tid];
        if (!ts) {
            ts = { 
                id: tid, 
                name: tname, 
                color:  Highcharts.getOptions().colors[$scope.topicSettings.hlMax++],
                highlight: true,
                chart: true
            };
            $scope.topicSettings.topics[tid] = ts;
        }
        return ts;
    }
    
    
    // utility functions
    this.getGlobalFilter = function() {
        // always returns a { operator: "AND", filters: [ ... ] };
        var filters = [];
        if (this.filter.dateFilter) filters.push(this.filter.dateFilter);
        if (this.filter.entities && (this.filter.entities.length>0)) {
            var ent = this.filter.entities.join(',');
            filters.push({ className: "%iKnow.Filters.ContainsEntityFilter", arguments: [ ent ] });
        }
        if (this.filter.topic) {
            filters.push({ className: "%iKnow.Filters.SimpleMatchFilter", arguments: [ this.filter.topic ] });
        }
        return (filters.length>0) ? { operator: "AND", filters: filters } : null;
    }
    /*this.getEntityFilter = function(ent) {
        var gf = this.getGlobalFilter();
        if (!ent) { return gf };
        var ef = { className: "%iKnow.Filters.ContainsEntityFilter", arguments: [ ent ] };
        if (gf) {
            gf.filters.push(ef);
            return gf;
        } else {
            return ef;
        }
    }*/
    this.getHighlights = function() {
        var h = [];
        if (this.currentEntity) { 
            h.push({"style": "<b>", "entities": [this.currentEntity]});
        }
        for (var i in $scope.topicSettings.topics) {
            var ts = $scope.topicSettings.topics[i];
            if (!ts.highlight) continue;
            h.push({
                dictionaries: [ ts.id ],
                style: "<span class='ik-match ik-match-full ik-match-$$$DICTID' title=\"Full match for $$$ITEM in $$$DICT\">",
                matchType: 'FULL'
            });
            h.push({
                dictionaries: [ ts.id ],
                style: "<span class='ik-match ik-match-partial ik-match-$$$DICTID' title=\"Partial match for $$$ITEM in $$$DICT\">",
                matchType: 'PARTIAL'
            });
        }
        return h;
    }
    $scope.applyHighlighting = function() {
        for (var i in $scope.topicSettings.topics) {
            var ts = $scope.topicSettings.topics[i];
            $('.ik-match-'+ts.id).css('border-color', ts.color);
            $('.ik-match-full.ik-match-'+ts.id).css('background-color', ts.color);
            if (ts.name == 'Symbols') {
                $('.ik-match-'+ts.id).css('cursor', 'pointer').click(function(e) {
                    window.open('http://www.google.com/finance?q='+e.target.innerText, '_blank');
                })
            }
        }
    };
    
    this.post = function(path, reqObj, callback, customREST=false) {
        
        if (customREST) {
            var url = "/csp/"+this.namespace+"/exREST"+path;
        } else {
            var url = "/api/iKnow/v1/"+this.namespace+path;
            
        }
        
        // auto-append filter & other params
        if (!reqObj) reqObj = {};
        if (!reqObj.filter) reqObj.filter = this.getGlobalFilter();
        reqObj.page = 1;
        reqObj.pageSize = pageSize;
        reqObj.debug = true;
        if (!reqObj.blacklists) {
            var bl = [];
            for (var i in $scope.blacklistSettings) {
                if ($scope.blacklistSettings[i].enabled) {
                    bl.push($scope.blacklistSettings[i].id);
                }
            }
            if (bl.length > 0) {
                reqObj.blacklists = bl;
            }
        }
        
        if (debug) console.log("POSTing to "+url, reqObj);
        
        $.ajax({
	  		url: "http://"+location.hostname+":"+location.port+url,
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify(reqObj)
	  	}).done(function(data) {
            if (debug) console.log("RETURN from POST to "+url, data);
            callback(data);
        });
    };
    
    
    
	
    // initialization
	if ((this.domain == null) || (this.domain == '') || (this.domain == undefined)) {
		alert("No domain specified in URL!");
		return;
	}
    if ((this.namespace == null) || (this.namespace == '') || (this.namespace == undefined)) {
        this.namespace = location.href.split("/")[4]; // best guess
        if (debug) console.log("Assuming namespace is '"+this.namespace+"'");
    }
    
    $scope.blacklistSettings = [];
    this.post("/domain/"+this.domain+"/blacklists", { includeDetails: false }, function(data) {
        $scope.blacklistSettings = data.blacklists;
        $scope.blacklistSettings.map(function(v) { v.enabled=true; return v; });
        console.log($scope.blacklistSettings);
        $('#go').click();
    });
}]);



// utility functions
$.urlParam = function(name, url) {
    if (!url) {
     url = window.location.href;
    }
    var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
    if (!results) { 
        return undefined;
    }
    return results[1] || undefined;
}
$.horolog = function(date) {
    if (!date) return null;
    var milliSeconds = date.getTime();
    var timeOfDay = Math.floor(milliSeconds/1000) % 86400;
    var days = Math.floor(milliSeconds / 86400000)+47117;
    return days+','+timeOfDay;
}

// some layout init
$(document).ready(function() {
    var totalHeight = 450; var halfHeight = parseInt((totalHeight-30)/2);
    $(".ik-resize-full").css("max-height", totalHeight+"px").css("height", totalHeight+"px");
    $(".ik-resize-panel").css("max-height", halfHeight+"px").css("height", halfHeight+"px");
    
    // tab init
    $('#modal-source-tabs a').click(function (e) {
        e.preventDefault();
        $(this).tab('show')
    })
    
    // datepicker init
    $('#input-filter-date-from').datetimepicker({language: 'en'});
    $('#input-filter-date-to').datetimepicker({language: 'en'});

    // chart init
    var topicsTreeL = new Highcharts.Chart({
        chart: { 
            type: 'treemap',
            layoutAlgorithm: 'squarified',
            renderTo: 'chart-topics-tree'
        },
        tooltip: {
            formatter: function () {
                return this.point.name + ": " + this.point.matchCount + ' matches';
            }
        },
        legend: { enabled: false },
        title: '',
        colorAxis: {
            minColor: '#FFFFFF',
            maxColor: Highcharts.getOptions().colors[0]
        },
        series: [ {
            data: []
        } ]
    });
    var topicsTreeS = new Highcharts.Chart({
        chart: { 
            type: 'treemap',
            layoutAlgorithm: 'squarified',
            renderTo: 'chart-topics-tree-small',
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0
        },
        tooltip: {
            formatter: function () {
                return this.point.name + ": " + this.point.matchCount + ' matches';
            }
        },
        legend: { enabled: false },
        title: '',
        colorAxis: {
            minColor: '#FFFFFF',
            maxColor: Highcharts.getOptions().colors[0]
        },
        series: [ {
            data: [],
            cursor: 'pointer'
        } ]
    });
    var topicsTimeS = new Highcharts.Chart({
        chart: {
            type: 'line',
            zoomType: 'x',
            renderTo: 'chart-topics-line-small',
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0
        },
        legend: { enabled: false },
        title: '',
        xAxis: {
            type: 'datetime',
            min: Date.UTC(2016,8,12)
        },
        yAxis: {
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: false
                }
            }
        },
        series: []
    });
    
});
]]></CSP>
</Export>

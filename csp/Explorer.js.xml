<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="Explorer.js" application="/csp/explorer/" default="1"><![CDATA[

var ikApp = angular.module('ikApp', ['ngSanitize']);

// global params
var debug = true;
var pageSize = 50;

ikApp.controller('iKnowController', ['$scope', '$filter', '$compile', function($scope, $filter, $compile) {
	
	this.domain = $.urlParam("domain");
    this.namespace = $.urlParam("namespace");
	this.mode = 'entities';
	this.currentEntity = '';
	this.filter = {};
    
    
    $scope.mainEntities = [];
    this.getEntities = function(str, forceApply=false) {
        if ((str == null) || (str == '')) {
            this.post("/domain/"+this.domain+"/entities", {}, function(data, ctrl) { 
                $scope.mainEntities = data.entities;
                if (forceApply) $scope.$apply();
            });
        } else {
            this.post("/domain/"+this.domain+"/entities/similar", { string: str }, function(data) { 
                $scope.mainEntities = data.entities;
                if (forceApply) $scope.$apply();
            });
        }
    };
    
    $scope.relEntities = [];
    this.getRelatedEntities = function(ent, forceApply=false) {
        this.post("/domain/"+this.domain+"/entities/related", { entity: ent }, function(data) {
            $scope.relEntities = data.entities;
            if (forceApply) $scope.$apply();
        });
    };
    
    this.exploreEntity = function(ent, leaveMainEntities=true, forceApply=false) {
        if (!leaveMainEntities) this.getEntities(ent, forceApply);
        this.getRelatedEntities(ent, forceApply);
        this.getSources(ent, forceApply);
        this.getTopicScores(ent);
    }
    
    
	this.typeEntity = function(event) {
		if (event && ((event.keyCode==13) || (event.which==13))) {
			this.exploreEntity(this.currentEntity, false);
		}
	}
    
    
    $scope.sources = [];
    $scope.filteredSourceCountE = "";
    this.getSources = function(ent, forceApply=false) {
        var request = { highlight: this.getHighlights() };
        if (ent != null) {
            request.filter = this.getEntityFilter(ent);
            request.entity = ent;
            request.highlight.push({"style": "<b>", "entities": [ent]});
            this.post("/domain/"+this.domain+"/sources/by/entity", request, function(data) {
                $scope.sources = data.sources;
                $scope.$apply();
            });
            this.post("/domain/"+this.domain+"/sources/count", { filter: this.getEntityFilter(ent)  }, function(data) {
                $scope.filteredSourceCountE = data.count;
                $scope.$apply();
            }, true);
        } else {
            request.filter = this.getGlobalFilter();
            this.post("/domain/"+this.domain+"/sources", request, function(data) {
                $scope.sources = data.sources;
                $scope.$apply();
            });
            this.post("/domain/"+this.domain+"/sources/count", { }, function(data) {
                $scope.filteredSourceCountE = data.count;
                $scope.$apply();
            }, true);
        }
    };
    this.showSource = function(srcId) {
        this.selectedSourceSummarize = 0;
        this.selectedSourceId = srcId;
        this.drawSource();
        $("#modal-source").modal();
    }
    this.drawSource = function() {
        var request = { summarize: this.selectedSourceSummarize, 
                        highlight: this.getHighlights() };
        this.post("/domain/"+this.domain+"/sources/"+this.selectedSourceId+"/details", request, function(data) {
            $scope.selectedSource = data;
            $scope.$apply();
        });
    };
    $scope.filteredSourceCountG = "";
    this.getSourceCount = function(forceApply=false) {
        this.post("/domain/"+this.domain+"/sources/count", { filter: this.getGlobalFilter() }, function(data) {
            $scope.filteredSourceCountG = data.count;
            if (forceApply) $scope.$apply();
        }, true);
    };
    
    $scope.topicLevel = "dictionary";
    $scope.topicFilter = {};
    $scope.totalMatchCount = "";
    this.getTopicScores = function(ent) {
        if (!ent) ent = this.currentEntity;
        var c = $('#chart-topics-tree-small').highcharts();
        if (c && c.series) {
            for (var i=0; i<c.series.length;i++) {
                c.series[0].remove();
            }
        }
        this.post("/domain/"+this.domain+"/matching/aggregate/"+$scope.topicLevel, 
                  { filter: this.getEntityFilter(ent), topicFilter: $scope.topicFilter }, 
                  function(data) {
            var agg = []; var total = 0; 
            for (var i = 0; i < data.scores.length; i++) {
                agg.push({
                    id: data.scores[i].id,
                    name: data.scores[i].name,
                    value: data.scores[i].totalScore,
                    colorValue: data.scores[i].avgScore,
                    matchCount: data.scores[i].matchCount,
                    events: { 
                        click: function(event) {
                            $scope.topicLevel = 'item';
                            $scope.topicFilter.dictionaries = [ this.id ];
                            $("#chart-topics-tree-small-refresh").click();
                        }
                    }
                });
                total += data.scores[i].matchCount;
                
                // and for the time graph
                var timeSeriesData = [];
                for (var j = 0; j < data.scores[i].detail.length; j++) {
                    var d = data.scores[i].detail[j].pubDate.split(':');
                    timeSeriesData.push([Date.UTC(d[0],d[1],d[2],d[3]), data.scores[i].detail[j].matchCount]);
                }
                $('#chart-topics-tree-small').highcharts().addSeries({ name: data.scores[i].name, data: timeSeriesData});
            }
            $scope.totalMatchCount = total;
            
            $('#chart-topics-tree').highcharts().series[0].setData(agg);
            $('#chart-topics-tree-small').highcharts().series[0].setData(agg);
        }, true);
    };
    
    this.filterDateField = 'PublicationDate'; // TODO: parameterize
    this.saveFilterForm = function() {
        // time
        var fromDate = $.horolog($('#input-filter-date-from').data('datetimepicker').getDate());
        var toDate = $.horolog($('#input-filter-date-to').data('datetimepicker').getDate());
        if (fromDate != null) {
            if (toDate != null) {
                this.filter.dateFilter = { field: this.filterDateField, operator: 'BETWEEN', value:fromDate+';'+toDate };
            } else {
                this.filter.dateFilter = { field: this.filterDateField, operator: '>=', value:fromDate };
            }
        } else {
            if (toDate != null) {
                this.filter.dateFilter = { field: this.filterDateField, operator: '<=', value:toDate };
            } else {
                this.filter.dateFilter = null;
            }
        }
        this.exploreEntity(null, false, true);
        $('#modal-filters').modal('hide');
        this.updateFilterBar();
    }
    
    this.updateFilterBar = function() {
        $('#filter-bar').empty();
        if (!this.filter) return;
        
        // time range
        if (this.filter.dateFilter) {
            var df = $('#input-filter-date-from').data('datetimepicker').getDate();
            var dt = $('#input-filter-date-to').data('datetimepicker').getDate();
            if (df && dt) {
                var lbl = df.toLocaleDateString()+' > '+dt.toLocaleDateString();
            } else if (df) {
                var lbl = 'since '+df.toLocaleDateString();
            } else if (dt) {
                var lbl = 'until '+dt.getLocaleDateString();
            }
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-success").text(lbl);
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","console.log('ok'); ik.removeFilter('date');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
        
        // entity
        if (this.filter.entities) {
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-primary").text("Contains: "+this.filter.entities.join(','));
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","console.log('ok'); ik.removeFilter('entity');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
        
        // topic
        if (this.filter.topic) {
            var b = $("<button>").attr("type","button").css('margin-left', '15px')
                    .addClass("btn btn-danger").text("Topic: "+this.filter.topic);
            $("<span>").addClass("glyphicon glyphicon-remove")
                    .attr("ng-click","console.log('ok'); ik.removeFilter('topic');")
                    .appendTo(b);
            b.appendTo('#filter-bar');
            
            $compile(b)($scope);
        }
    }
    this.removeFilter = function(name) {
        if (name == 'date') {
            delete this.filter.dateFilter;
        } else if (name == 'entity') {
            delete this.filter.entities;
        } else if (name == 'topic') {
            delete this.filter.topic;
        }
        this.exploreEntity(null, false, true);
        this.updateFilterBar();
    }
	
    
    // utility functions
    this.getGlobalFilter = function() {
        // always returns a { operator: "AND", filters: [ ... ] };
        var filters = [];
        if (this.filter.dateFilter) filters.push(this.filter.dateFilter);
        if (this.filter.entities && (this.filter.entities.length>0)) {
            var ent = this.filter.entities.join(',');
            filters.push({ className: "%iKnow.Filters.ContainsEntityFilter", arguments: [ ent ] });
        }
        if (this.filter.topic) {
            filters.push({ className: "%iKnow.Filters.SimpleMatchFilter", arguments: [ this.filter.topic ] });
        }
        return (filters.length>0) ? { operator: "AND", filters: filters } : null;
    }
    this.getEntityFilter = function(ent) {
        var gf = this.getGlobalFilter();
        if (!ent) { return gf };
        var ef = { className: "%iKnow.Filters.ContainsEntityFilter", arguments: [ ent ] };
        if (gf) {
            gf.filters.push(ef);
            return gf;
        } else {
            return ef;
        }
    }
    this.getHighlights = function() {
        var h = [];
        if (this.currentEntity) h[h.length] = {"style": "<b>", "entities": [this.currentEntity]};
        return h;
    }
    
    this.post = function(path, reqObj, callback, customREST=false) {
        
        if (customREST) {
            var url = "/csp/"+this.namespace+"/exREST"+path;
        } else {
            var url = "/api/iKnow/v1/"+this.namespace+path;
            
        }
        
        // auto-append filter & other params
        if (!reqObj) reqObj = {};
        if (!reqObj.filter) reqObj.filter = this.getGlobalFilter();
        reqObj.page = 1;
        reqObj.pageSize = pageSize;
        
        if (debug) console.log("POSTing to "+url, reqObj);
        
        $.ajax({
	  		url: "http://"+location.hostname+":"+location.port+url,
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify(reqObj)
	  	}).done(function(data) {
            if (debug) console.log("RETURN from POST to "+url, data);
            callback(data);
        });
    };
    
    
    
	
    // initialization
	if ((this.domain == null) || (this.domain == '') || (this.domain == undefined)) {
		alert("No domain specified in URL!");
		return;
	}
    if ((this.namespace == null) || (this.namespace == '') || (this.namespace == undefined)) {
        this.namespace = location.href.split("/")[4]; // best guess
        if (debug) console.log("Assuming namespace is '"+this.namespace+"'");
    }
    this.getEntities('', true); // init top entities
    this.getSources(null, true); // init filtered source count
    this.getSourceCount(true); // init filtered source count
    this.getTopicScores();
    
}]);



// utility functions
$.urlParam = function(name, url) {
    if (!url) {
     url = window.location.href;
    }
    var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
    if (!results) { 
        return undefined;
    }
    return results[1] || undefined;
}
$.horolog = function(date) {
    if (!date) return null;
    var milliSeconds = date.getTime();
    var timeOfDay = Math.floor(milliSeconds/1000) % 86400;
    var days = Math.floor(milliSeconds / 86400000)+47117;
    return days+','+timeOfDay;
}

// some layout init
$(document).ready(function() {
    var totalHeight = 450; var halfHeight = parseInt((totalHeight-30)/2);
    $(".ik-resize-full").css("max-height", totalHeight+"px").css("height", totalHeight+"px");
    $(".ik-resize-panel").css("max-height", halfHeight+"px").css("height", halfHeight+"px");
    
    // datepicker init
    $('#input-filter-date-from').datetimepicker({language: 'en'});
    $('#input-filter-date-to').datetimepicker({language: 'en'});

    // chart init
    var topicsTreeL = new Highcharts.Chart({
        chart: { 
            type: 'treemap',
            layoutAlgorithm: 'squarified',
            renderTo: 'chart-topics-tree'
        },
        tooltip: {
            formatter: function () {
                return this.point.name + ": " + this.point.matchCount + ' matches';
            }
        },
        legend: { enabled: false },
        title: '',
        colorAxis: {
            minColor: '#FFFFFF',
            maxColor: Highcharts.getOptions().colors[0]
        },
        series: [ {
            data: []
        } ]
    });
    /*var topicsTreeS = new Highcharts.Chart({
        chart: { 
            type: 'treemap',
            layoutAlgorithm: 'squarified',
            renderTo: 'chart-topics-tree-small',
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0
        },
        tooltip: {
            formatter: function () {
                return this.point.name + ": " + this.point.matchCount + ' matches';
            }
        },
        legend: { enabled: false },
        title: '',
        colorAxis: {
            minColor: '#FFFFFF',
            maxColor: Highcharts.getOptions().colors[0]
        },
        series: [ {
            data: [],
            cursor: 'pointer'
        } ]
    });*/
    var topicsTimeS = new Highcharts.Chart({
        chart: {
            type: 'line',
            zoomType: 'x',
            renderTo: 'chart-topics-tree-small',
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0
        },
        legend: { enabled: false },
        title: '',
        xAxis: {
            type: 'datetime',
            min: Date.UTC(2016,9,12)
        },
        yAxis: {
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: false
                }
            }
        },
        series: []
    });
    
});
]]></CSP>
</Export>
